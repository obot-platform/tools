---
Name: Google Sheets
Description: Create, read, and write to spreadsheets in Google Sheets
Metadata: bundle: true
Metadata: mcp: true
Metadata: categories: Official,Data & Analytics,Office Productivity
Share Tools: Read Spreadsheet, Query Spreadsheet, Read Tables From Spreadsheet, Create Spreadsheet, Update Cells In Spreadsheet, Update With Formula

---
Name: Read Spreadsheet
Description: Read data from a Google Sheet.
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_id: (Required) The ID of the Spreadsheet
Param: range: (Optional) A1 notation of the cells to read (e.g. "A2:D100" or "A1:Z5"), defaults to the entire sheet, can also be a single cell (e.g. "A1")
Param: sheet_name: (Optional) The name of the sheet to read from, defaults to the first sheet

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/readSpreadsheet.py

---
Name: Query Spreadsheet
Description: Filter and query specific data from a Google Sheet using SQL-like syntax. Perfect for finding rows that match certain criteria.
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_id: (Required) The ID of the Spreadsheet
Param: query: (Required) The SQL-like query using pandas syntax (e.g. "column1 == 'value1' and column2 > 10")
Param: show_columns: (Optional) Comma-delimited list of columns to include in output, defaults to first 5 columns
Param: sheet_name: (Optional) The name of the sheet to read from, defaults to the first sheet

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/querySpreadsheet.py

---
Name: Read Tables From Spreadsheet
Description: Automatically detect and extract multiple tables from a Google Sheet. Useful when a sheet contains separate data tables with blank rows between them.
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_id: (Required) The ID of the Spreadsheet
Param: range: (Optional) A1 notation of cells to read, defaults to the entire sheet
Param: sheet_name: (Optional) The name of the sheet to read from, defaults to the first sheet

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/readTablesFromSpreadsheet.py

---
Name: Create Spreadsheet
Description: Create a new Google Sheet with the specified name. Returns the ID of the newly created spreadsheet.
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_name: (Required) The name of the spreadsheet to create

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/createSpreadsheet.py

---
Name: Update With Formula
Description: Apply the same formula pattern across an entire row or column in a Google Sheet. Perfect for creating sequences, calculated fields, or applying uniform formulas with row/column references that automatically adjust (e.g., creating running totals, sequential numbering, or formulas that reference position-relative data).
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_id: (Required) The ID of the Spreadsheet
Param: sheet_name: (Optional) The name of the page to read from (by default reads the first page)
Param: target_range: (Required) A1 notation of the cells to fill (e.g. "D2:D100" or "A5:Z5"), must be a single row or column, can also be a single cell (e.g. "A1")
Param: formula_template: (Required) a template for Google Sheets formulas that supports: - {row} → the row number - {col} → the column letter e.g. "=A{row}-B{row}"  or  "=SUM({col}1:{col}10)"

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/update_with_formula.py

---
Name: Update Cells In Spreadsheet
Description: Update individual cells with specific values or formulas in a Google Sheet. Use when you need to update different cells with unique content (unlike Update With Formula which applies the same pattern across a range). Perfect for inserting varied data, custom formulas at specific locations, or making targeted changes to a spreadsheet.
Share Context: Google Sheets Context
Credential: ../credential
Param: spreadsheet_id: (Required) The ID of the Spreadsheet
Param: sheet_name: (Optional) The name of the page to read from, defaults to the first page
Param: update_cells: (Required) A json list of objects that each contains the `coordinate` and the `data` field, the coordinate is an A1 notation of the cell to update, e.g. "A1", "B2", etc, the data is either a string or a formula. Example: [{"coordinate": "A1", "data": "New Value"}, {"coordinate": "B2", "data": "=SUM(A1:A2)"}]

#!/usr/bin/env python3 ${GPTSCRIPT_TOOL_DIR}/update_cells.py

---
Name: Google Sheets Context
Type: context

#!sys.echo

<google_sheets_tools_instructions>
You can access, create, and modify Google Sheets via available tools.

1. Always ask the user to supply the sheet URL if spreadsheet_id is not provided.
2. Never expose raw sheet IDs in your output.
3. To detect headers, initially read only the first two rows:
   - If row 1 contains column names, treat it as headers.
   - Otherwise proceed without headers.
4. For filtering or selecting specific fields, prefer the "Query Spreadsheet" tool:
   - Craft your query to fetch only the columns and rows needed.
5. When the user requests full data, return the complete range—even if large.
</google_sheets_tools_instructions>

---
!metadata:*:icon
/admin/assets/google_sheets_icon_small.png

---
!metadata:*:oauth
google
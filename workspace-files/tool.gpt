Name: Workspace Files
Description: Manage files in the Obot workspace
Type: context
Metadata: category: Capability
Context: workspace_list
Share Tools: workspace_read, workspace_write, workspace_copy, workspace_file_download_url
Share Input Filter: input_parse

#!/bin/bash

FILES="$GPTSCRIPT_CONTEXT"
if [ -z "$FILES" ]; then
    FILES="No files found in workspace"
fi

cat << EOF

<workspace_instructions>
### Workspace and File Handling

- **Workspace Definition:** The user workspace is a virtual file system accessible to both you and the user for reading and writing plain text files (e.g., `.txt`, `.md`, `.csv`, `.json`).
- **Tool Output Separation:** Files generated by tool actions (such as screenshots, PDFs, or downloads) are **not** automatically saved to the user workspace and are **not** accessible to you or the user unless you explicitly write them to the workspace using a supported plain text format.
- **No Shared File System:** You do not share a file system with your tools. Any file paths or references returned by tools are not accessible to you or the user, and you cannot create download links for these files.
- **Download Links:** Do **not** offer or attempt to provide download links for files generated by tools unless you have explicitly written the file to the user workspace in a supported plain text format and confirmed its presence there.
- **File Writing Restrictions:** You may only write plain text files to the workspace. Do not attempt to write binary or non-plain text files (such as images or PDFs) to the workspace.

### Binary File and Tool Output Handling

- **UI Capabilities:** The UI is capable of displaying binary outputs (such as images, screenshots, or PDFs) from tool calls directly to the user. The UI also provides explicit options for the user to download these files or add them to the workspace.
- **Assistant Behavior:**
    - Do not state that binary files are “too large to display” or “cannot be accessed or downloaded” if the UI can display them and provide download/add-to-workspace options.
    - Do not offer to encode binary files as base64 or write them to a text file unless the user specifically requests this.
    - If the user asks for a download or to add the file to the workspace, inform them that the UI provides these options directly for tool-generated files.
    - Only offer alternative formats (such as base64 in a text file) if the user explicitly requests it.

### User Collaboration

- Collaborate with the user on files in the workspace. If the user requests a file or download link, first ensure the file exists in the workspace and is in a supported format.
- If a user requests a file generated by a tool (e.g., a screenshot), inform them that such files are not automatically available in the workspace and cannot be provided as a download unless explicitly written in a supported plain text format, but that the UI provides options to view, download, or add these files to the workspace.

### Response Guidelines

- Be clear and accurate about what files are available to the user.
- If you are unsure whether a file is accessible, check the workspace file list before responding.
- Do not mention internal processing limitations or technical constraints unless the user specifically asks about them or requests an action that is not possible. If the user can see or interact with a tool-generated file in the UI, simply acknowledge this and refer them to the UI controls for further actions.
- If a user asks for a download link to a tool-generated file, explain the separation between tool outputs and the workspace, and clarify what is and isn’t possible, referencing the UI’s capabilities as appropriate.

</workspace_instructions>

<files_in_workspace>
List of files currently in workspace:
$FILES
</files_in_workspace>
EOF

---
Name: workspace_list
Description: List all files in the workspace
Params: dir: The directory to list files from

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool list

---
Name: workspace_read
Description: Read the contents of a file in the workspace. For non-plain text files, it will parse the text. If the text is too long, it will summarize the text.
Credential: sys.model.provider.credential
Params: filename: The filename to read

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool read

---
Name: workspace_file_download_url
Description: Get a URL that the current user can use to download a given workspace file. This URL is authenticated and authorized to the current user and is not appropriate for public sharing.
Params: filename: The filename to get a download URL for

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool download-url

---
Name: workspace_write
Description: Writes content to a file, replacing any existing content if the file already exists. Supports only plain text formats (e.g., .txt, .md).
Params: filename: The filename to write to
Params: content: The contents to write to the file

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool write

---
Name: workspace_copy
Description: Copy the contents of a file to a new filename
Params: filename: The filename to copy from
Params: to_filename: The new filename to copy to

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool copy

---
Name: input_parse
Description: Prompt formatting for Obot
Params: input: The input to filter

#!${GPTSCRIPT_TOOL_DIR}/bin/gptscript-go-tool input

---
!metadata:*:icon
https://cdn.jsdelivr.net/npm/@phosphor-icons/core@2/assets/duotone/file-text-duotone.svg
